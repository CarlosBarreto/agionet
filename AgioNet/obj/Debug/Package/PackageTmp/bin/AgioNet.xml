<?xml version="1.0"?>
<doc>
<assembly>
<name>
AgioNet
</name>
</assembly>
<members>
<member name="M:AgioNet.AgioNet.diagnosticoController.ClearErr">
	<summary>
 Funcion que elimina de la memoria, el error registrado en ErrMsg
 </summary>
	<remarks></remarks>
</member><member name="M:AgioNet.AgioNet.diagnosticoController.HasOrderID">
	<summary>
 Para determinar si hay registrada una Orden en la session
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="F:AgioNet.DataAccess._LastErrorMessage">
	<summary>
 Almacena el ultimo error ocurrido en la clase
 </summary>
	<remarks></remarks>
</member><member name="F:AgioNet.DataAccess._dbServer">
	<summary>
 Almacena el nombre del servidor de Base de datos
 </summary>
	<remarks></remarks>
</member><member name="F:AgioNet.DataAccess._dbDataBase">
	<summary>
 Almacena el nombre de la base de datos
 </summary>
	<remarks></remarks>
</member><member name="F:AgioNet.DataAccess._dbUser">
	<summary>
 Almacena el Id de usuario de la base de datos
 </summary>
	<remarks></remarks>
</member><member name="F:AgioNet.DataAccess._dbPassword">
	<summary>
 Almacena el password de acceso a la base de datos
 </summary>
	<remarks></remarks>
</member><member name="P:AgioNet.DataAccess.LastErrorMessage">
	<summary>
 Contiene el ultimo error ocurrido en el sistema
 </summary>
	<value>El valor inicial es una cadena en vacia</value>
	<returns>Retorna el ultimo error ocurrido en la clase</returns>
	<remarks>El sistema no muestra las exepciones que ocurren, debido a esto es preferible
          que se guarde el ultimo mensaje de error para que pueda ser mostrado en la 
          página
 </remarks>
</member><member name="P:AgioNet.DataAccess.db_Server">
	<summary>
 Contiene el nombre del servidor de Base de Datos
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:AgioNet.DataAccess.db_DataBase">
	<summary>
 Contiene el nombre de la Base de Datos Accesada
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:AgioNet.DataAccess.db_User">
	<summary>
 Contiene el ID de usuario de acceso a la Base de Datos
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:AgioNet.DataAccess.db_Password">
	<summary>
 Contiene el ID password de acceso a la Base de Datos
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:AgioNet.DataAccess.Reader">
	<summary>
 Propiedad que contiene el READER de la Base de datos
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:AgioNet.DataAccess.#ctor(System.String,System.String,System.String,System.String)">
	<summary>
 Constructor SobreCargado
 </summary>
	<param name="Server"></param>
	<param name="DataBase"></param>
	<param name="UserID"></param>
	<param name="Password"></param>
	<remarks></remarks>
</member><member name="M:AgioNet.DataAccess.Dispose">
	<summary>
 Destructor
 </summary>
	<remarks></remarks>
</member><member name="M:AgioNet.DataAccess.CadenaConexion">
	<summary>
 Genera una cadena de conexión / Make a new Connection String
 </summary>
	<returns>Connection String</returns>
	<remarks></remarks>
</member><member name="M:AgioNet.DataAccess.GetRecordsetQuery(System.String)">
	<summary>
 Ejecuta un Query SQL / Execute a SQL Query
 </summary>
	<param name="strSQL">SQL Query</param>
	<returns>Retorna un DataReader / Returns a DataReader</returns>
	<remarks></remarks>
</member><member name="M:AgioNet.DataAccess.ExecuteQuery(System.String)">
	<summary>
 Executa un Query SQL sin retornar valores / Execute a SQL Query without return values
 </summary>
	<param name="strSQL">SQL Query</param>
	<remarks></remarks>
</member><member name="M:AgioNet.DataAccess.ExecuteSP(System.String,System.Object[])">
	<summary>
 Ejecuta un Stored Procedure con parametros / Execute a Stored Procedure with parameters 
 </summary>
	<param name="SPName">Nombre del Stored Procedure / Stored Procedure Name</param>
	<param name="Parameters">Parametros del StoredProcedure / Parameters Array </param>
	<returns>Retorna un DataReader / Returns a SQLDataReader</returns>
	<remarks></remarks>
</member><member name="M:AgioNet.DataAccess.ExecuteSP(System.String)">
	<summary>
 Ejecuta un Stored Procedured sin parametros / Exec a Stored Procedure without parameters
 </summary>
	<param name="SPName">Nombre del Stored Procedure / Stored Procedure Name</param>
	<returns>Retorna un dataReader / Returns SQLDataReader</returns>
	<remarks></remarks>
</member><member name="M:AgioNet.AgioNet.reciboController.getReRepair(System.String,AgioNet.DataAccess@)">
	<summary>
  Obtiene el valor de Rerepair de una Orden
 </summary>
	<param name="OrderID"></param>
	<param name="_DA_"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:AgioNet.AgioNet.reciboController.getWarranty(System.String,AgioNet.DataAccess@)">
	<summary>
 Obtiene la cantidad de dias desde el ultimo ingreso para saber si está en garantía
 </summary>
	<param name="OrderID"></param>
	<param name="_DA_"></param>
	<returns></returns>
	<remarks></remarks>
</member>
</members>
</doc>